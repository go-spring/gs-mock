// Code generated by gsmock v0.0.1. DO NOT EDIT.
// Source: https://github.com/go-spring/mock
// gsmock -o assert_mock.go -i 'T'

package assert

import (
	"reflect"

	"github.com/go-spring/mock"
)

type TMockImpl struct {
	r *mock.Manager
}

func NewTMockImpl(r *mock.Manager) *TMockImpl {
	return &TMockImpl{r: r}
}

func (impl *TMockImpl) Helper() {
	t := reflect.TypeFor[TMockImpl]()
	if _, ok := mock.Invoke(impl.r, t, "Helper"); ok {
		return
	}
	panic("no mock code matched")
}

func (impl *TMockImpl) MockHelper() *mock.Mocker00 {
	t := reflect.TypeFor[TMockImpl]()
	return mock.NewMocker00(impl.r, t, "Helper")
}

func (impl *TMockImpl) Error(args ...interface{}) {
	t := reflect.TypeFor[TMockImpl]()
	if _, ok := mock.Invoke(impl.r, t, "Error", args); ok {
		return
	}
	panic("no mock code matched")
}

func (impl *TMockImpl) MockError() *mock.Mocker10[[]interface{}] {
	t := reflect.TypeFor[TMockImpl]()
	return mock.NewMocker10[[]interface{}](impl.r, t, "Error")
}
