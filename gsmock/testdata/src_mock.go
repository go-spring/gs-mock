// Code generated by gsmock v0.0.1. DO NOT EDIT.
// Source: https://github.com/go-spring/mock
// gsmock -o src_mock.go -i '!ServiceV2'

package testdata

import (
	"context"
	"net/http"
	"reflect"

	"github.com/go-spring/mock"
	"github.com/go-spring/mock/gsmock/testdata/inner"
)

type ServiceMockImpl struct {
	r *mock.Manager
}

func NewServiceMockImpl(r *mock.Manager) *ServiceMockImpl {
	return &ServiceMockImpl{r: r}
}

func (impl *ServiceMockImpl) Get(ctx context.Context, req *inner.Request, params map[string]string) (*Response, error) {
	t := reflect.TypeFor[ServiceMockImpl]()
	if ret, ok := mock.Invoke(impl.r, t, "Get", ctx, req, params); ok {
		return mock.Unbox2[*Response, error](ret)
	}
	panic("no mock code matched")
}

func (impl *ServiceMockImpl) MockGet() *mock.Mocker32[context.Context, *inner.Request, map[string]string, *Response, error] {
	t := reflect.TypeFor[ServiceMockImpl]()
	return mock.NewMocker32[context.Context, *inner.Request, map[string]string, *Response, error](impl.r, t, "Get")
}

type RepositoryMockImpl[T any] struct {
	r *mock.Manager
}

func NewRepositoryMockImpl[T any](r *mock.Manager) *RepositoryMockImpl[T] {
	return &RepositoryMockImpl[T]{r: r}
}

func (impl *RepositoryMockImpl[T]) Save(item T) error {
	t := reflect.TypeFor[RepositoryMockImpl[T]]()
	if ret, ok := mock.Invoke(impl.r, t, "Save", item); ok {
		return mock.Unbox1[error](ret)
	}
	panic("no mock code matched")
}

func (impl *RepositoryMockImpl[T]) MockSave() *mock.Mocker11[T, error] {
	t := reflect.TypeFor[RepositoryMockImpl[T]]()
	return mock.NewMocker11[T, error](impl.r, t, "Save")
}

func (impl *RepositoryMockImpl[T]) FindByID(id string) (T, error) {
	t := reflect.TypeFor[RepositoryMockImpl[T]]()
	if ret, ok := mock.Invoke(impl.r, t, "FindByID", id); ok {
		return mock.Unbox2[T, error](ret)
	}
	panic("no mock code matched")
}

func (impl *RepositoryMockImpl[T]) MockFindByID() *mock.Mocker12[string, T, error] {
	t := reflect.TypeFor[RepositoryMockImpl[T]]()
	return mock.NewMocker12[string, T, error](impl.r, t, "FindByID")
}

type RepositoryV2MockImpl[T ~int | ~uint, M *http.Request] struct {
	Repository[T]

	r *mock.Manager
}

func NewRepositoryV2MockImpl[T ~int | ~uint, M *http.Request](r *mock.Manager) *RepositoryV2MockImpl[T, M] {
	return &RepositoryV2MockImpl[T, M]{r: r}
}
